// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // referentialIntegrity = "prisma"
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"]
}

enum BusinessRole {
  ISSUER
  VERIFIER
  WALLET
}

enum UserRole {
  USER
  ADMIN
}

enum CredentialOfferStatus {
  WAITING_APPROVAL
  APPROVED
}

enum TransactionStatus {
  CREATED
  RESERVED
  FULLFILLED
}

enum PaymentType {
  DEPOSIT
  WITHDRAWAL
  REFUND
  CREDIT
}

enum PaymentStatus {
  CREATED
  VERIFYING
  COMPLETED
  IN_TRANSIT
}

enum TransactionRequsitionStatus {
  NEW
  REQUESTED_BY_USER
  REQUESTED_BY_WALLET
  VALIDATEDBYISSUER
  VALIDATEDBYWALLET
  VALIDATED
  FULLFILLED
}

enum ExchangeType {
  WEB
}

enum Currency {
  EUR
  USD
  ETH
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String     @id @default(cuid())
  name               String?
  email              String?    @unique
  emailVerified      DateTime?
  image              String?
  roles              UserRole[] @default([USER])
  accounts           Account[]
  sessions           Session[]
  businesses         Business[] @relation("AllBusinesses")
  selectedBusinessId String?
  selectedBusiness   Business?  @relation(fields: [selectedBusinessId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Balance {
  id           String        @id @default(cuid())
  amount       Int
  currency     Currency
  business     Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId   String
  payments     Payment[]
  transactions Transaction[] @relation("BalanceTransactions")
  logs         String[]

  @@unique([currency, businessId], name: "businessCurrency")
}

// A business e.g. BR
model Business {
  id               String            @id @default(cuid())
  name             String
  slug             String            @unique
  invoiceInfo      String?
  did              String?           @unique
  apikey           String?           @unique
  users            User[]            @relation("AllBusinesses")
  payments         Payment[]
  transactions     Transaction[]
  credentialOffers CredentialOffer[]
  requsitions      Requsition[]      @relation(name: "verifierRequsitions")
  selectedByUsers  User[]
  balance          Balance[]
}

model CredentialType {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  name             String            @unique
  price            Int
  credentialOffers CredentialOffer[]
  requsitions      Requsition[]
}

model CredentialExchange {
  id              String            @id @default(cuid())
  type            ExchangeType      @unique @default(WEB)
  CredentialOffer CredentialOffer[]
}

// Isser put up a offer for a issue credential
model CredentialOffer {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  issuerId             String
  name                 String                @unique
  price                Int
  credentialType       CredentialType        @relation(fields: [credentialTypeId], references: [id])
  credentialTypeId     String
  issuer               Business              @relation(fields: [issuerId], references: [id])
  parentRequirementId  String?
  parentRequirement    CredentialOffer?      @relation("CredentialOfferRequirements", fields: [parentRequirementId], references: [id])
  requirements         CredentialOffer[]     @relation("CredentialOfferRequirements")
  status               CredentialOfferStatus
  transactions         Transaction[]         @relation(name: "CredentialOfferTransactions")
  exchange             CredentialExchange    @relation(fields: [credentialExchangeId], references: [id])
  credentialExchangeId String
}

model Requsition {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  price            Int
  verifier         Business       @relation("verifierRequsitions", fields: [verifierId], references: [id]) // Who needs and will be paying for the VC
  verifierId       String
  transactions     Transaction[]  @relation(name: "transactionsForRequsition")
  credentialType   CredentialType @relation(fields: [credentialTypeId], references: [id])
  credentialTypeId String
}

model Transaction {
  id                          String                      @id @default(cuid())
  createdAt                   DateTime                    @default(now())
  wallet                      Business                    @relation(fields: [walletId], references: [id])
  walletId                    String
  transactionRequsitionStatus TransactionRequsitionStatus
  transactionStatus           TransactionStatus
  credentialOfferId           String?
  requsition                  Requsition                  @relation(name: "transactionsForRequsition", fields: [requsitionId], references: [id])
  requsitionId                String
  credentialOffer             CredentialOffer?            @relation(name: "CredentialOfferTransactions", fields: [credentialOfferId], references: [id])
  proof                       String?
  price                       Int
  balances                    Balance[]                   @relation("BalanceTransactions")
}

model Payment {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  amount     Int // Divide by 100 to get the actual value. positive for income and refunds. Negative for cost
  type       PaymentType
  status     PaymentStatus
  business   Business      @relation(fields: [businessId], references: [id])
  businessId String
  balance    Balance?      @relation(fields: [balanceId], references: [id])
  balanceId  String?
}
